package edu.iss.ects.imp;

import edu.iss.ects.entity.Entity;
import edu.iss.ects.entity.Product;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;

/**
 * @author Microwind
 * 
 */
public class ProductDAO extends BaseHibernateDAO {
	private static final Log log = LogFactory.getLog(ProductDAO.class);
	public static final String NAME = "name";
	public static final String AUTHOR = "author";
	public static final String PUBLISH = "publish";
	public static final String PRICE = "price";
	public static final String PAGES = "pages";
	public static final String IMAGE = "image";
	public static final String DESCRIPTION = "description";
	public static final String CATEGORY_ID = "categoryId";

	public void save(Product transientInstance) {
		log.debug("saving Product instance");
		Transaction tr = null;
		Session session = null;
		try {
			session = getSession();
			tr = session.beginTransaction();
			session.save(transientInstance);
			tr.commit();
			log.debug("save successful");
		} catch (RuntimeException re) {
			tr.rollback();
			log.error("save failed", re);
			throw re;
		} finally {
			this.closeSession();
		}
	}

	public void delete(Product persistentInstance) {
		log.debug("deleting Product instance");
		Transaction tr = null;
		Session session = null;
		try {
			session = getSession();
			tr = session.beginTransaction();
			session.delete(persistentInstance);
			tr.commit();
			log.debug("delete successful");
		} catch (RuntimeException re) {
			tr.rollback();
			log.error("delete failed", re);
			throw re;
		} finally {
			this.closeSession();
		}
	}

	public Product findById(java.lang.Integer id) {
		log.debug("getting Product instance with id: " + id);
		try {
			Product instance = (Product) getSession().get(
					"edu.iss.ects.entity.Product", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Product instance) {
		log.debug("finding Product instance by example");
		try {
			List results = getSession().createCriteria(
					"edu.iss.ects.entity.Product")
					.add(Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Product instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Product as model where model."
					+ propertyName + "= ?";
			Query queryObject = getSession().createQuery(queryString);
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findByName(Object name) {
		return findByProperty(NAME, name);
	}

	public List findByAuthor(Object author) {
		return findByProperty(AUTHOR, author);
	}

	public List findByPublish(Object publish) {
		return findByProperty(PUBLISH, publish);
	}

	public List findByCategoryId(Object categoryId) {
		return findByProperty(CATEGORY_ID, categoryId);
	}

	public List<Entity> findAll() {
		List<Entity> list = null;
		Session session = null;
		Transaction tr = null;
		try {
			session = this.getSession();
			tr = session.beginTransaction();
			Query query = session.createQuery("from Product");
			list = query.list();
			tr.commit();
		} catch (Exception e) {
			tr.rollback();
			e.printStackTrace();
		} finally {
			this.closeSession();
		}
		return list;
	}

	public void attachDirty(Product instance) {
		log.debug("attaching dirty Product instance");
		Transaction tr = null;
		Session session = null;
		try {
			session = getSession();
			tr = session.beginTransaction();
			session.saveOrUpdate(instance);
			tr.commit();
			log.debug("attach successful");
		} catch (RuntimeException re) {
			tr.rollback();
			log.error("attach failed", re);
			throw re;
		} finally {
			this.closeSession();
		}
	}

}